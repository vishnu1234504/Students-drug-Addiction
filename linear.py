# -*- coding: utf-8 -*-
"""linear.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/153EU3WUWEGrEE4xWWKQ_bLRZv5o7rsYT
"""

import sklearn;
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score

df=pd.read_csv("addiction.csv")
df.head()

import sklearn.preprocessing as preprocessing
le=preprocessing.LabelEncoder()

df['Experimentation']=le.fit_transform(df['Experimentation'].astype(str))
df['Academic_Performance_Decline']=le.fit_transform(df['Academic_Performance_Decline'].astype(str))
df['Social_Isolation']=le.fit_transform(df['Social_Isolation'].astype(str))
df['Financial_Issues']=le.fit_transform(df['Financial_Issues'].astype(str))
df['Physical_Mental_Health_Problems']=le.fit_transform(df['Physical_Mental_Health_Problems'].astype(str))
df['Legal_Consequences']=le.fit_transform(df['Legal_Consequences'].astype(str))
df['Relationship_Strain']=le.fit_transform(df['Relationship_Strain'].astype(str))
df['Risk_Taking_Behavior']=le.fit_transform(df['Risk_Taking_Behavior'].astype(str))
df['Withdrawal_Symptoms']=le.fit_transform(df['Withdrawal_Symptoms'].astype(str))
df['Denial_and_Resistance_to_Treatment']=le.fit_transform(df['Denial_and_Resistance_to_Treatment'].astype(str))
df['Addiction_Class']=le.fit_transform(df['Addiction_Class'].astype(str))
df.head()
df.tail()

X = df.drop(columns=['Addiction_Class'])
y = df['Addiction_Class']

print(X)

print(y)

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=2)

lm=LinearRegression()
lm.fit(X_train,y_train)
y_pred=lm.predict(X_test)
plt.plot(y_test,y_pred)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted')
plt.show()

print(y_pred.min())
print(y_pred.max())

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f}')
print(f'R-squared: {r2:.2f}')

# Function to preprocess new input and make predictions
def predict_addiction(input_data):
    # Convert input data to DataFrame
    df = pd.DataFrame([input_data])
    import sklearn.preprocessing as preprocessing
    le=preprocessing.LabelEncoder()
    # Encode the input data
    df['Experimentation']=le.fit_transform(df['Experimentation'].astype(str))
    df['Academic_Performance_Decline']=le.fit_transform(df['Academic_Performance_Decline'].astype(str))
    df['Social_Isolation']=le.fit_transform(df['Social_Isolation'].astype(str))
    df['Financial_Issues']=le.fit_transform(df['Financial_Issues'].astype(str))
    df['Physical_Mental_Health_Problems']=le.fit_transform(df['Physical_Mental_Health_Problems'].astype(str))
    df['Legal_Consequences']=le.fit_transform(df['Legal_Consequences'].astype(str))
    df['Relationship_Strain']=le.fit_transform(df['Relationship_Strain'].astype(str))
    df['Risk_Taking_Behavior']=le.fit_transform(df['Risk_Taking_Behavior'].astype(str))
    df['Withdrawal_Symptoms']=le.fit_transform(df['Withdrawal_Symptoms'].astype(str))
    df['Denial_and_Resistance_to_Treatment']=le.fit_transform(df['Denial_and_Resistance_to_Treatment'].astype(str))

    # Make prediction
    lm=LinearRegression()
    lm.fit(X_train,y_train)
    prediction = lm.predict(df)

    return prediction

# Example new input (replace with actual input data)
new_input = {
    'Experimentation': 'Yes',
    'Academic_Performance_Decline': 'Yes',
    'Social_Isolation': 'No',
    'Financial_Issues': 'No',
    'Physical_Mental_Health_Problems': 'Yes',
    'Legal_Consequences': 'No',
    'Relationship_Strain': 'No',
    'Risk_Taking_Behavior': 'No',
    'Withdrawal_Symptoms': 'Yes',
    'Denial_and_Resistance_to_Treatment': 'No'
}

# Predict addiction class for the new input
prediction = predict_addiction(new_input)
print(f'Predicted value: {prediction[0]:.2f}')